package clobber;
import game.*;
import java.util.*;
import clobber.ScoredClobberMove;

public class AlphaBetaPlayer extends GamePlayer {

	public static final double MAX_SCORE = Double.POSITIVE_INFINITY;
	public static final int ROWS = ClobberState.ROWS;
	public static final int COLS = ClobberState.COLS;
	
	public static final int MAX_DEPTH = 7;
	public int depthLimit;
	
	// Used to store the best move at any particular depth
	protected ScoredClobberMove[] mvStack;
	
	
	/**
	 * Determines whether a board represents a completed game.  If the board is
	 * complete, then the evaluation value for the board is recorded based on
	 * which players is moving.
	 * 
	 * @param brd	: clobber board to be considered
	 * @param move	: the move associated with the board state
	 * @return 		: true if the board is terminal
	 */
	protected boolean terminalValue(GameState board, ScoredClobberMove move) {
		GameState.Status status = board.getStatus();
		boolean isTerminal = true;
		
		if (status == GameState.Status.HOME_WIN) {
			move.setScore(MAX_SCORE);
		}
		else if (status == GameState.Status.AWAY_WIN) {
			move.setScore(-MAX_SCORE);
		}
		else if (status == GameState.Status.DRAW) {
			move.setScore(0);
		}
		else {
			isTerminal = false;
		}
		
		return isTerminal;
	}
	
	/**
	 * Used to initialize the alpha beta search.
	 * 		- Creates the default move stack of best moves
	 * 		- Other things?
	 */
	public void init() {
		mvStack = new ScoredClobberMove [MAX_DEPTH];
		
		for (int i=0; i < MAX_DEPTH; i++) {
			mvStack[i] = new ScoredClobberMove(0, 0, 1, 0, 0);
		}
	}
	
	public void reinit(GameState state)
	{
		/*
		ClobberMove firstmove = getMoves(state).get(0);
		for (int i=0; i < MAX_DEPTH; i++) {
			mvStack[i] = new ScoredClobberMove(firstmove, 0);
		}
		*/
	}
	
	/**
	 * 
	 * 
	 * @param state
	 * @return
	 */
	public ArrayList<ClobberMove> getMoves(GameState state)
	{
		ClobberState board = (ClobberState) state;
		ArrayList<ClobberMove> list = new ArrayList<ClobberMove>();  
		ClobberMove mv = new ClobberMove();
		for (int r=0; r<ClobberState.ROWS; r++) {
			for (int c=0; c<ClobberState.COLS; c++) {
				mv.row1 = r;
				mv.col1 = c;
				mv.row2 = r-1;
				mv.col2 = c;
				if (board.moveOK(mv)) {
				list.add((ClobberMove)mv.clone());
				}
				mv.row2 = r+1;
				mv.col2 = c;
				if (board.moveOK(mv)) {
					list.add((ClobberMove)mv.clone());
				}
				mv.row2 = r;
				mv.col2 = c-1;
				if (board.moveOK(mv)) {
					list.add((ClobberMove)mv.clone());
				}
				mv.row2 = r;
				mv.col2 = c+1;
				if (board.moveOK(mv)) {
					list.add((ClobberMove)mv.clone());
				}
			}
		}
		//System.out.println("moves size: " + list.size());
		return list;
	}
	
	/**
	 * Performs alpha beta pruning.
	 * @param brd
	 * @param currDepth
	 * @param alpha
	 * @param beta
	 */
	private void alphaBeta(ClobberState brd, int currDepth,
										double alpha, double beta)
	{
		boolean toMaximize = (brd.getWho() == GameState.Who.HOME);
		boolean toMinimize = !toMaximize;

		boolean isTerminal = terminalValue(brd, mvStack[currDepth]);
		ClobberMove firstMove = null; 
		if (!isTerminal)
			firstMove = getMoves(brd).get(0);
		
		if (isTerminal) {
			;
		} else if (currDepth == depthLimit) {
			mvStack[currDepth].set(firstMove, eval(brd));
		} else {
			ScoredClobberMove tempMv = new ScoredClobberMove(firstMove, 0);

			double bestScore = (toMaximize ? 
					Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
			ScoredClobberMove bestMove = mvStack[currDepth];
			ScoredClobberMove nextMove = mvStack[currDepth+1];

			bestMove.set(firstMove, bestScore);
			GameState.Who currTurn = brd.getWho();

			ArrayList<ClobberMove> moves = getMoves(brd);
			//maybe shuffle moves?
			for (int i = 0; i < moves.size(); i++) {
				ClobberMove move = moves.get(i);
				tempMv = new ScoredClobberMove(move);			// initialize move
				
				brd.makeMove(tempMv);
	
				alphaBeta(brd, currDepth+1, alpha, beta);  // Check out move
				
				// Undo move			
				
				brd.board[tempMv.row1][tempMv.col1] = (brd.getWho() == GameState.Who.HOME ? ClobberState.homeSym : ClobberState.awaySym);
				brd.board[tempMv.row2][tempMv.col2] = (brd.getWho() == GameState.Who.AWAY ? ClobberState.homeSym : ClobberState.awaySym);
				
				brd.status = GameState.Status.GAME_ON;
				brd.who = currTurn;
				
				// Check out the results, relative to what we've seen before
				if (toMaximize && nextMove.score > bestMove.score) {
					bestMove.set(move, nextMove.score);
				} else if (!toMaximize && nextMove.score < bestMove.score) {
					bestMove.set(move, nextMove.score);
				}
					// Update alpha and beta. Perform pruning, if possible.
				if (toMinimize) {
					beta = Math.min(bestMove.score, beta);
					if (bestMove.score <= alpha || bestMove.score == -MAX_SCORE) {
						return;
					}
				} else {
					alpha = Math.max(bestMove.score, alpha);
					if (bestMove.score >= beta || bestMove.score == MAX_SCORE) {
						return;
					}
				}
			}
		}
	}
	
	public AlphaBetaPlayer(String n, int depth) {
		super(n, new ClobberState(), false);
		this.depthLimit = depth;
	}
	
	public GameMove getMove(GameState state, String lastMove) {
		reinit(state);
		alphaBeta((ClobberState)state, 0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
		return mvStack[0];
	/*	ClobberState board = (ClobberState)state;
		ArrayList<ClobberMove> list = new ArrayList<ClobberMove>();  
		ClobberMove mv = new ClobberMove();
		
		for (int r=0; r<ClobberState.ROWS; r++) {
			for (int c=0; c<ClobberState.COLS; c++) {
				mv.row1 = r;
				mv.col1 = c;
				mv.row2 = r-1; mv.col2 = c;
				if (board.moveOK(mv)) {
					list.add((ClobberMove)mv.clone());
				}
				mv.row2 = r+1; mv.col2 = c;
				if (board.moveOK(mv)) {
					list.add((ClobberMove)mv.clone());
				}
				mv.row2 = r; mv.col2 = c-1;
				if (board.moveOK(mv)) {
					list.add((ClobberMove)mv.clone());
				}
				mv.row2 = r; mv.col2 = c+1;
				if (board.moveOK(mv)) {
					list.add((ClobberMove)mv.clone());
				}
			}
		}
		
		int value = eval(board);
		
		int which = Util.randInt(0, list.size()-1);
		return list.get(which);
		*/
	}
	
	/**
	 * An evaluation function for the alpha-beta player.  This method calculates the difference
	 * between the number of pieces home and away can move.  Home should prefer states where the
	 * function is maximized, whereas away should prefer states with minimized values.
	 * 
	 * @param gs	: the current game state
	 * @return		: an integer indicating which side is winning
	 */
	private int eval(ClobberState gs) {
		int homePiecesMove = 0;
		int awayPiecesMove = 0;
		
		for (int row = 0; row < ClobberState.ROWS; row++) {
			for (int col = 0; col < ClobberState.COLS; col++) {
				// If the home piece can move, increment its movable pieces
				if (gs.board[row][col] == ClobberState.homeSym && canMove(row, col, gs.board)) {
					homePiecesMove++;
				}
				// If the away piece can move, increment its movable pieces
				else if (gs.board[row][col] == ClobberState.awaySym && canMove(row, col, gs.board)) {
					awayPiecesMove++;
				}
			}
		}
		
		//System.out.println("Home: " + homePiecesMove + "\nAway: " + awayPiecesMove);
		
		// Return the difference between the home and away pieces
		return homePiecesMove - awayPiecesMove;
	}
	
	/**
	 * Checks whether the player piece at the specified location can move to at least one adjacent
	 * location.  Pieces can move to in-bound and opponent-occupied adjacent locations.
	 * 
	 * @param row		: the row of the player piece
	 * @param col		: the column of the player piece
	 * @param board		: the game board
	 * @return			: true if the player piece can move
	 */
	private boolean canMove(int row, int col, char[][] board) {
		char playerSym = board[row][col];
		ClobberMove cm = new ClobberMove();
		
		// Check (row + 1, column)
		cm.row2 = row + 1;
		cm.col2 = col;
		if (moveOK(cm, board, playerSym)) return true;
		
		// Check (row - 1, column)
		cm.row2 = row - 1;
		cm.col2 = col;
		if (moveOK(cm, board, playerSym)) return true;
		
		// Check (row, column + 1)
		cm.row2 = row;
		cm.col2 = col + 1;
		if (moveOK(cm, board, playerSym)) return true;
		
		// Check (row, column - 1)
		cm.row2 = row;
		cm.col2 = col - 1;
		if (moveOK(cm, board, playerSym)) return true;
		
		// Return false if no moves possible
		return false;
	}
	
	/**
	 * Checks to see whether the specified move is valid.  This method assumes that the player
	 * is adjacent to the move locations (i.e. that the moves are available) and only returns true
	 * if the location is in bounds and occupied by the opponent.
	 * 
	 * @param cm				: the move object
	 * @param board				: the Clobber board
	 * @param playerSym			: the color of the player
	 * @return					: true if OK
	 */
	private boolean moveOK(ClobberMove cm, char[][] board, char playerSym) {
		// Set the opponent symbol
		char opponent = (playerSym == ClobberState.homeSym) ? 
				ClobberState.awaySym : ClobberState.homeSym;
		
		// Check whether the move is valid
		if (cm != null && Util.inrange(cm.row2, 0, ClobberState.ROWS - 1) &&
			Util.inrange(cm.col2, 0, ClobberState.COLS - 1) && board[cm.row2][cm.col2] == opponent) {
				return true;
			}
		
		return false;
	}
	
	public static void main(String [] args) {
		GamePlayer p = new AlphaBetaPlayer("Alpha Beta Player", AlphaBetaPlayer.MAX_DEPTH - 1);
		p.compete(args, 1);
	}
}
