package clobber;

public class ScoredClobberMove extends ClobberMove {
	
	public double score;
	
	
	/**
	 * Constructs a default instance of ScoredClobberPlayer.  This constructor uses the super-
	 * constructor to create a standard ClobberMove, then sets default score value.
	 */
	public ScoredClobberMove() {
		super();
		this.score = 0;
	}
	
	/**
	 * Constructs an instance ScoredClobberMove based on a specified source move.  This
	 * constructor uses the super-constructor to copy the original move, then sets the score
	 * using the values from the original.
	 * 
	 * @param move		: the source ScoredClobberMove
	 */
	public ScoredClobberMove(ScoredClobberMove move) {
		super(move);
		this.score = move.score;
	}
	
	/**
	 * Constructs an instance of ScoredClobberMove using the specified parameters.
	 * 
	 * @param r1		: the row of the attacking piece
	 * @param c1		: the column of the attacking piece
	 * @param r2		: the row of the target piece
	 * @param c2		: the column of the attacking piece
	 * @param score		: the score associated with the move
	 */
	public ScoredClobberMove(int r1, int c1, int r2, int c2, double score) {
		super(r1, c1, r2, c2);
		this.score = score;
	}
	
	/**
	 * Calculate distance values for move ordering
	 */
	public int CalculateDistance(){
		int distance = 0;
		
		// If the move is up
		if (row1 > (ClobberState.ROWS / 2) && row2 > row1)
			distance = ClobberState.ROWS - row1;
		
		// If the move is down
		else if (row1 < (ClobberState.ROWS / 2) && row2 < row1)
			distance = row1;
		
		// If the move is right
		else if (col1 > (ClobberState.COLS / 2) && col2 > col1)
			distance = ClobberState.COLS - col1;
		
		// If the move is left
		else if (col1 < (ClobberState.COLS / 2) && col2 < col1)
			distance = col1;
		
		return distance;
	}
	
	public Object clone() {
		return new ScoredClobberMove(row1, col1, row2, col2, score);
	}
	
	public String toString() {
		return row1 + " " + col1 + " " + row2 + " " + col2 + " " + score;
	}
	
	public void set(int row1, int col1, int row2, int col2, double score) {
		this.row1 = row1;
		this.col1 = col1;
		this.row2 = row2;
		this.col2 = col2;
		this.score = score;
	}
	
	public void set(ClobberMove move, double score) {
		this.row1 = move.row1;
		this.col1 = move.col1;
		this.row2 = move.row2;
		this.col2 = move.col2;
		this.score = score;
	}
	
	/**
	 * Updates the score of the move to the specified new score.
	 * 
	 * @param newScore		: the new score
	 */
	public void setScore(double newScore) {
		this.score = newScore;
	}
}